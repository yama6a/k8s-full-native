apiVersion: v1
kind: Namespace
metadata:
  name: wl-my-app-ns
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: my-secret         # should be same as .spec.template.metadata.name (below)
  namespace: wl-my-app-ns # should be same as .spec.template.metadata.namespace (below)
  annotations:
    # possible scopes:
    # - strict:         Changing the metadata.name or metadata.namespace will cause the SealedSecret to fail to unseal. (i.e. no k8s Secret resource will be created)
    # - namespace-wide: Changing the metadata.name is allowed, but changing the namespace will cause the SealedSecret to fail to unseal. (i.e. "copying" this manifest with its encrypted values into another namespace won't work)
    # - cluster-wide:   Changing the name or namespace of the secret is allowed. (i.e. the manifest can be copied to another namespace)
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # add key-value pairs here. Encrypt the values one-by-one using kubeseal:
    # echo "some-password" | kubeseal --controller-namespace=sys-sealed-secrets --scope=namespace-wide -n wl-my-app-ns --raw
    mykey: VGhpcyBpcyBub3QgcmVhbCB5b3UgZm9vbCEK # encrypted value goes here
  template:
    metadata:
      name: my-secret         # should be same as .metadata.name (above)
      namespace: wl-my-app-ns # should be same as .metadata.namespace (above)
